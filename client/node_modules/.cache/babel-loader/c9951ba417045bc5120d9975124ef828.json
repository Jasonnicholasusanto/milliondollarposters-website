{"ast":null,"code":"var _jsxFileName = \"/Users/Jason/Desktop/Folders/milliondollar-web-app/client/src/components/List/List.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./List.scss\";\nimport Card from \"../Card/Card.jsx\";\nimport useFetch from '../../hooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = _ref => {\n  _s();\n\n  let {\n    subCats,\n    maxPrice,\n    sort,\n    categoryId\n  } = _ref;\n  // let query = `/posters?populate=*&[filters][poster_materials][id]=${categoryId}${subCats.map(\n  //     (item) => `&[filters][sub_categories][id][$eq]=${item}`\n  // )}&[filters][price][$lte]=${maxPrice}`\n  let query = `/posters?populate=*`;\n\n  if (categoryId) {\n    query += `&[filters][poster_materials][id]=${categoryId}${subCats.map(item => `&[filters][sub_categories][id][$eq]=${item}`)}&[filters][price][$lte]=${maxPrice}`;\n  } else {\n    query += `&[filters][price][$lte]=${maxPrice}`;\n  }\n\n  if (sort !== null) {\n    query += `&sort=price:${sort}`;\n  }\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(query);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: error ? \"Oops! Something went wrong.\" : loading ? \"loading...\" : data ? data === null || data === void 0 ? void 0 : data.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 42\n    }, this)) : \"No items found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this) // Need to implement a message where if there is no items after placing in filters, then state \"no items found\".\n  ;\n};\n\n_s(List, \"r14mJDRFIohEWG5JuFWBli83tkQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/Jason/Desktop/Folders/milliondollar-web-app/client/src/components/List/List.jsx"],"names":["React","useState","Card","useFetch","List","subCats","maxPrice","sort","categoryId","query","map","item","data","loading","error","console","log","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;AAEA,MAAMC,IAAI,GAAG,QAA6C;AAAA;;AAAA,MAA5C;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,GAA4C;AAEtD;AACA;AACA;AAEA,MAAIC,KAAK,GAAI,qBAAb;;AAEA,MAAID,UAAJ,EAAgB;AACZC,IAAAA,KAAK,IAAK,oCAAmCD,UAAW,GAAEH,OAAO,CAACK,GAAR,CACrDC,IAAD,IAAW,uCAAsCA,IAAK,EADA,CAExD,2BAA0BL,QAAS,EAFrC;AAGH,GAJD,MAIO;AACHG,IAAAA,KAAK,IAAK,2BAA0BH,QAAS,EAA7C;AACH;;AAGD,MAAIC,IAAI,KAAK,IAAb,EAAmB;AACfE,IAAAA,KAAK,IAAK,eAAcF,IAAK,EAA7B;AACH;;AAED,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BX,QAAQ,CACrCM,KADqC,CAAzC;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACKE,KAAK,GAAG,6BAAH,GACLD,OAAO,GAAG,YAAH,GACPD,IAAI,GAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEF,GAAN,CAAWC,IAAD,iBAAU,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA;AAAZ,OAAuBA,IAAI,CAACM,EAA5B;AAAA;AAAA;AAAA;AAAA,YAApB,CAAJ,GACD;AAJR;AAAA;AAAA;AAAA;AAAA,UADJ,CASI;AATJ;AAWH,CAtCD;;GAAMb,I;UAqB+BD,Q;;;KArB/BC,I;AAwCN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport \"./List.scss\";\nimport Card from \"../Card/Card.jsx\";\nimport useFetch from '../../hooks/useFetch';\n\nconst List = ({ subCats, maxPrice, sort, categoryId }) => {\n\n    // let query = `/posters?populate=*&[filters][poster_materials][id]=${categoryId}${subCats.map(\n    //     (item) => `&[filters][sub_categories][id][$eq]=${item}`\n    // )}&[filters][price][$lte]=${maxPrice}`\n\n    let query = `/posters?populate=*`;\n    \n    if (categoryId) {\n        query += `&[filters][poster_materials][id]=${categoryId}${subCats.map(\n            (item) => `&[filters][sub_categories][id][$eq]=${item}`\n        )}&[filters][price][$lte]=${maxPrice}`;\n    } else {\n        query += `&[filters][price][$lte]=${maxPrice}`;\n    }\n\n\n    if (sort !== null) {\n        query += `&sort=price:${sort}`;\n    }\n\n    const { data, loading, error } = useFetch(\n        query\n    );\n\n    console.log(data);\n\n    return (\n        <div className=\"list\">\n            {error ? \"Oops! Something went wrong.\" : \n            (loading ? \"loading...\" : \n            (data ? (data?.map((item) => <Card item={item} key={item.id}/>)) :\n                \"No items found.\"\n            ))} \n        </div>\n\n        // Need to implement a message where if there is no items after placing in filters, then state \"no items found\".\n    )\n}\n\nexport default List; "]},"metadata":{},"sourceType":"module"}